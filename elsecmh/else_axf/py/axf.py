# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info

if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_axf')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_axf')
    _axf = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module(
                '_axf', [dirname(__file__)])
        except ImportError:
            import _axf
            return _axf
        try:
            _mod = imp.load_module('_axf', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _axf = swig_import_helper()
    del swig_import_helper
else:
    import _axf
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError(
        "'%s' object has no attribute '%s'" %
        (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__,
                             self.__class__.__name__, strthis,)


try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


class float_buffer(_object):
    __swig_setmethods__ = {}

    def __setattr__(
        self,
        name,
        value): return _swig_setattr(
        self,
        float_buffer,
        name,
        value)
    __swig_getmethods__ = {}
    def __getattr__(self, name): return _swig_getattr(self, float_buffer, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _axf.new_float_buffer(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _axf.delete_float_buffer
    def __del__(self): return None

    def __getitem__(self, index):
        return _axf.float_buffer___getitem__(self, index)

    def __setitem__(self, index, value):
        return _axf.float_buffer___setitem__(self, index, value)

    def cast(self):
        return _axf.float_buffer_cast(self)
    if _newclass:
        frompointer = staticmethod(_axf.float_buffer_frompointer)
    else:
        frompointer = _axf.float_buffer_frompointer


float_buffer_swigregister = _axf.float_buffer_swigregister
float_buffer_swigregister(float_buffer)


def float_buffer_frompointer(t):
    return _axf.float_buffer_frompointer(t)


float_buffer_frompointer = _axf.float_buffer_frompointer


class int_buffer(_object):
    __swig_setmethods__ = {}

    def __setattr__(
        self,
        name,
        value): return _swig_setattr(
        self,
        int_buffer,
        name,
        value)
    __swig_getmethods__ = {}
    def __getattr__(self, name): return _swig_getattr(self, int_buffer, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _axf.new_int_buffer(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _axf.delete_int_buffer
    def __del__(self): return None

    def __getitem__(self, index):
        return _axf.int_buffer___getitem__(self, index)

    def __setitem__(self, index, value):
        return _axf.int_buffer___setitem__(self, index, value)

    def cast(self):
        return _axf.int_buffer_cast(self)
    if _newclass:
        frompointer = staticmethod(_axf.int_buffer_frompointer)
    else:
        frompointer = _axf.int_buffer_frompointer


int_buffer_swigregister = _axf.int_buffer_swigregister
int_buffer_swigregister(int_buffer)


def int_buffer_frompointer(t):
    return _axf.int_buffer_frompointer(t)


int_buffer_frompointer = _axf.int_buffer_frompointer

AXF_COMPAT_PROF_SVBRDF = _axf.AXF_COMPAT_PROF_SVBRDF
AXF_COMPAT_PROF_SVBRDF_REFRACT = _axf.AXF_COMPAT_PROF_SVBRDF_REFRACT
AXF_COMPAT_PROF_CARPAINT = _axf.AXF_COMPAT_PROF_CARPAINT
AXF_COMPAT_PROF_CARPAINT_REFRACT = _axf.AXF_COMPAT_PROF_CARPAINT_REFRACT
AXF_COMPAT_PROF_BTF = _axf.AXF_COMPAT_PROF_BTF
AXF_COMPAT_PROF_BASELINE_SVBRDF = _axf.AXF_COMPAT_PROF_BASELINE_SVBRDF
AXF_COMPAT_PROF_BASELINE_BTF = _axf.AXF_COMPAT_PROF_BASELINE_BTF
AXF_REPRESENTATION_CLASS_SVBRDF = _axf.AXF_REPRESENTATION_CLASS_SVBRDF
AXF_REPRESENTATION_CLASS_CARPAINT = _axf.AXF_REPRESENTATION_CLASS_CARPAINT
AXF_REPRESENTATION_CLASS_CARPAINT2 = _axf.AXF_REPRESENTATION_CLASS_CARPAINT2
AXF_REPRESENTATION_CLASS_FACTORIZED_BTF = _axf.AXF_REPRESENTATION_CLASS_FACTORIZED_BTF
AXF_REPRESENTATION_CLASS_LAYERED = _axf.AXF_REPRESENTATION_CLASS_LAYERED
AXF_TYPEKEY_SVBRDF_DIFFUSE_LAMBERT = _axf.AXF_TYPEKEY_SVBRDF_DIFFUSE_LAMBERT
AXF_TYPEKEY_SVBRDF_DIFFUSE_ORENNAYAR = _axf.AXF_TYPEKEY_SVBRDF_DIFFUSE_ORENNAYAR
AXF_TYPEKEY_SVBRDF_SPECULAR_WARD = _axf.AXF_TYPEKEY_SVBRDF_SPECULAR_WARD
AXF_TYPEKEY_SVBRDF_SPECULAR_BLINNPHONG = _axf.AXF_TYPEKEY_SVBRDF_SPECULAR_BLINNPHONG
AXF_TYPEKEY_SVBRDF_SPECULAR_COOKTORRANCE = _axf.AXF_TYPEKEY_SVBRDF_SPECULAR_COOKTORRANCE
AXF_TYPEKEY_SVBRDF_SPECULAR_PHONG = _axf.AXF_TYPEKEY_SVBRDF_SPECULAR_PHONG
AXF_TYPEKEY_SVBRDF_SPECULAR_GGX = _axf.AXF_TYPEKEY_SVBRDF_SPECULAR_GGX
AXF_SVBRDF_SPECULAR_WARD_VARIANT_GEISLERMORODER = _axf.AXF_SVBRDF_SPECULAR_WARD_VARIANT_GEISLERMORODER
AXF_SVBRDF_SPECULAR_WARD_VARIANT_DUER = _axf.AXF_SVBRDF_SPECULAR_WARD_VARIANT_DUER
AXF_SVBRDF_SPECULAR_WARD_VARIANT_WARD = _axf.AXF_SVBRDF_SPECULAR_WARD_VARIANT_WARD
AXF_SVBRDF_SPECULAR_BLINN_VARIANT_ASHIKHMIN_SHIRLEY = _axf.AXF_SVBRDF_SPECULAR_BLINN_VARIANT_ASHIKHMIN_SHIRLEY
AXF_SVBRDF_SPECULAR_BLINN_VARIANT_BLINN = _axf.AXF_SVBRDF_SPECULAR_BLINN_VARIANT_BLINN
AXF_SVBRDF_SPECULAR_BLINN_VARIANT_VRAY = _axf.AXF_SVBRDF_SPECULAR_BLINN_VARIANT_VRAY
AXF_SVBRDF_SPECULAR_BLINN_VARIANT_LEWIS = _axf.AXF_SVBRDF_SPECULAR_BLINN_VARIANT_LEWIS
AXF_SVBRDF_FRESNEL_VARIANT_SCHLICK = _axf.AXF_SVBRDF_FRESNEL_VARIANT_SCHLICK
AXF_SVBRDF_FRESNEL_VARIANT_FRESNEL = _axf.AXF_SVBRDF_FRESNEL_VARIANT_FRESNEL
AXF_TYPEKEY_FACTORIZED_BTF_DFMF = _axf.AXF_TYPEKEY_FACTORIZED_BTF_DFMF
AXF_TYPEKEY_FACTORIZED_BTF_DPVF = _axf.AXF_TYPEKEY_FACTORIZED_BTF_DPVF
AXF_FACTORIZED_BTF_REPRESENTATION_VARIANT_DEFAULT = _axf.AXF_FACTORIZED_BTF_REPRESENTATION_VARIANT_DEFAULT
AXF_FACTORIZED_BTF_REPRESENTATION_VARIANT_SQRTY = _axf.AXF_FACTORIZED_BTF_REPRESENTATION_VARIANT_SQRTY
AXF_PREVIEW_IMAGE_NAME_DEFAULT = _axf.AXF_PREVIEW_IMAGE_NAME_DEFAULT
AXF_SVBRDF_TEXTURE_NAME_DIFFUSE_COLOR = _axf.AXF_SVBRDF_TEXTURE_NAME_DIFFUSE_COLOR
AXF_SVBRDF_TEXTURE_NAME_NORMAL = _axf.AXF_SVBRDF_TEXTURE_NAME_NORMAL
AXF_SVBRDF_TEXTURE_NAME_SPECULAR_COLOR = _axf.AXF_SVBRDF_TEXTURE_NAME_SPECULAR_COLOR
AXF_SVBRDF_TEXTURE_NAME_SPECULAR_LOBE = _axf.AXF_SVBRDF_TEXTURE_NAME_SPECULAR_LOBE
AXF_SVBRDF_TEXTURE_NAME_ANISO_ROTATION = _axf.AXF_SVBRDF_TEXTURE_NAME_ANISO_ROTATION
AXF_SVBRDF_TEXTURE_NAME_ALPHA = _axf.AXF_SVBRDF_TEXTURE_NAME_ALPHA
AXF_SVBRDF_TEXTURE_NAME_HEIGHT = _axf.AXF_SVBRDF_TEXTURE_NAME_HEIGHT
AXF_SVBRDF_TEXTURE_NAME_FRESNEL = _axf.AXF_SVBRDF_TEXTURE_NAME_FRESNEL
AXF_SVBRDF_TEXTURE_NAME_CLEARCOAT_NORMAL = _axf.AXF_SVBRDF_TEXTURE_NAME_CLEARCOAT_NORMAL
AXF_SVBRDF_TEXTURE_NAME_CLEARCOAT_IOR = _axf.AXF_SVBRDF_TEXTURE_NAME_CLEARCOAT_IOR
AXF_SVBRDF_TEXTURE_NAME_CLEARCOAT_COLOR = _axf.AXF_SVBRDF_TEXTURE_NAME_CLEARCOAT_COLOR
AXF_SVBRDF_TEXTURE_NAME_SUBSURFACESCATTERING_TRANSMISSIONCOLOR = _axf.AXF_SVBRDF_TEXTURE_NAME_SUBSURFACESCATTERING_TRANSMISSIONCOLOR
AXF_SVBRDF_TEXTURE_NAME_SUBSURFACESCATTERING_EXTINCTIONLENGTH = _axf.AXF_SVBRDF_TEXTURE_NAME_SUBSURFACESCATTERING_EXTINCTIONLENGTH
AXF_CARPAINT2_TEXTURE_NAME_BRDF_COLORS = _axf.AXF_CARPAINT2_TEXTURE_NAME_BRDF_COLORS
AXF_CARPAINT2_TEXTURE_NAME_BTF_FLAKES = _axf.AXF_CARPAINT2_TEXTURE_NAME_BTF_FLAKES
AXF_CARPAINT2_TEXTURE_NAME_CLEARCOAT_NORMAL = _axf.AXF_CARPAINT2_TEXTURE_NAME_CLEARCOAT_NORMAL
AXF_CARPAINT2_PROPERTY_BRDF_CT_DIFFUSE = _axf.AXF_CARPAINT2_PROPERTY_BRDF_CT_DIFFUSE
AXF_CARPAINT2_PROPERTY_BRDF_CT_COEFFS = _axf.AXF_CARPAINT2_PROPERTY_BRDF_CT_COEFFS
AXF_CARPAINT2_PROPERTY_BRDF_CT_F0S = _axf.AXF_CARPAINT2_PROPERTY_BRDF_CT_F0S
AXF_CARPAINT2_PROPERTY_BRDF_CT_SPREADS = _axf.AXF_CARPAINT2_PROPERTY_BRDF_CT_SPREADS
AXF_CARPAINT2_PROPERTY_FLAKES_NUM_THETAF = _axf.AXF_CARPAINT2_PROPERTY_FLAKES_NUM_THETAF
AXF_CARPAINT2_PROPERTY_FLAKES_NUM_THETAI = _axf.AXF_CARPAINT2_PROPERTY_FLAKES_NUM_THETAI
AXF_CARPAINT2_PROPERTY_FLAKES_MAX_THETAI = _axf.AXF_CARPAINT2_PROPERTY_FLAKES_MAX_THETAI
AXF_CARPAINT2_PROPERTY_FLAKES_THETAFI_SLICE_LUT = _axf.AXF_CARPAINT2_PROPERTY_FLAKES_THETAFI_SLICE_LUT
AXF_CARPAINT2_PROPERTY_CC_IOR = _axf.AXF_CARPAINT2_PROPERTY_CC_IOR
AXF_CLEARCOAT_PROPERTY_NAME_NO_REFRACTION = _axf.AXF_CLEARCOAT_PROPERTY_NAME_NO_REFRACTION
AXF_COLORSPACE_CIE_1931_XYZ = _axf.AXF_COLORSPACE_CIE_1931_XYZ
AXF_COLORSPACE_LINEAR_SRGB_E = _axf.AXF_COLORSPACE_LINEAR_SRGB_E
AXF_COLORSPACE_LINEAR_ADOBE_RGB_E = _axf.AXF_COLORSPACE_LINEAR_ADOBE_RGB_E
AXF_COLORSPACE_LINEAR_ADOBE_WIDEGAMUT_RGB_E = _axf.AXF_COLORSPACE_LINEAR_ADOBE_WIDEGAMUT_RGB_E
AXF_COLORSPACE_LINEAR_PROPHOTO_RGB_E = _axf.AXF_COLORSPACE_LINEAR_PROPHOTO_RGB_E
AXF_MAX_KEY_SIZE = _axf.AXF_MAX_KEY_SIZE
TYPE_HALF = _axf.TYPE_HALF
TYPE_HALF_ARRAY = _axf.TYPE_HALF_ARRAY
TYPE_INT = _axf.TYPE_INT
TYPE_INT_ARRAY = _axf.TYPE_INT_ARRAY
TYPE_FLOAT = _axf.TYPE_FLOAT
TYPE_FLOAT_ARRAY = _axf.TYPE_FLOAT_ARRAY
TYPE_STRING = _axf.TYPE_STRING
TYPE_UTF_STRING = _axf.TYPE_UTF_STRING
TYPE_BOOLEAN = _axf.TYPE_BOOLEAN
TYPE_ERROR = _axf.TYPE_ERROR
TEXTURE_TYPE_HALF = _axf.TEXTURE_TYPE_HALF
TEXTURE_TYPE_FLOAT = _axf.TEXTURE_TYPE_FLOAT
TEXTURE_TYPE_BYTE = _axf.TEXTURE_TYPE_BYTE
ORIGIN_TOPLEFT = _axf.ORIGIN_TOPLEFT
ORIGIN_BOTTOMLEFT = _axf.ORIGIN_BOTTOMLEFT
LOGLEVEL_INFO = _axf.LOGLEVEL_INFO
LOGLEVEL_WARNING = _axf.LOGLEVEL_WARNING
LOGLEVEL_ERROR = _axf.LOGLEVEL_ERROR
LOGCONTEXT_AXF_IO = _axf.LOGCONTEXT_AXF_IO
LOGCONTEXT_DECODERS = _axf.LOGCONTEXT_DECODERS
LOGCONTEXT_GENERIC = _axf.LOGCONTEXT_GENERIC


def axfEnableLogging(*args):
    return _axf.axfEnableLogging(*args)


axfEnableLogging = _axf.axfEnableLogging


def axfDisableLogging():
    return _axf.axfDisableLogging()


axfDisableLogging = _axf.axfDisableLogging


def axfOpenFile(sFilename, bReadOnly=False, bReadLazy=True):
    return _axf.axfOpenFile(sFilename, bReadOnly, bReadLazy)


axfOpenFile = _axf.axfOpenFile


def axfOpenFileW(sFilename, bReadOnly=False, bReadLazy=True):
    return _axf.axfOpenFileW(sFilename, bReadOnly, bReadLazy)


axfOpenFileW = _axf.axfOpenFileW


def axfCloseFile(phAxfFile):
    return _axf.axfCloseFile(phAxfFile)


axfCloseFile = _axf.axfCloseFile


def axfGetNumberOfMaterials(hAxFFile):
    return _axf.axfGetNumberOfMaterials(hAxFFile)


axfGetNumberOfMaterials = _axf.axfGetNumberOfMaterials


def axfGetMaterial(hAxFFile, iMaterial):
    return _axf.axfGetMaterial(hAxFFile, iMaterial)


axfGetMaterial = _axf.axfGetMaterial


def axfGetDefaultMaterial(hAxFFile):
    return _axf.axfGetDefaultMaterial(hAxFFile)


axfGetDefaultMaterial = _axf.axfGetDefaultMaterial


def axfGetMaterialDisplayName(hAxFMaterial, sBuf):
    return _axf.axfGetMaterialDisplayName(hAxFMaterial, sBuf)


axfGetMaterialDisplayName = _axf.axfGetMaterialDisplayName


def axfGetMaterialIDString(hAxFMaterial, sBuf):
    return _axf.axfGetMaterialIDString(hAxFMaterial, sBuf)


axfGetMaterialIDString = _axf.axfGetMaterialIDString


def axfGetMaterialName(hAxFFile, iMaterial, sBuf):
    return _axf.axfGetMaterialName(hAxFFile, iMaterial, sBuf)


axfGetMaterialName = _axf.axfGetMaterialName


def axfGetDefaultMaterialName(hAxFFile, sBuf):
    return _axf.axfGetDefaultMaterialName(hAxFFile, sBuf)


axfGetDefaultMaterialName = _axf.axfGetDefaultMaterialName


def axfFindMaterialByIDString(hAxFFile, sMaterialID):
    return _axf.axfFindMaterialByIDString(hAxFFile, sMaterialID)


axfFindMaterialByIDString = _axf.axfFindMaterialByIDString


def axfGetNumberOfMetadataDocuments(*args):
    return _axf.axfGetNumberOfMetadataDocuments(*args)


axfGetNumberOfMetadataDocuments = _axf.axfGetNumberOfMetadataDocuments


def axfGetMetadataDocument(*args):
    return _axf.axfGetMetadataDocument(*args)


axfGetMetadataDocument = _axf.axfGetMetadataDocument


def axfGetMetadataDocumentName(hAxFMetadataDocument, sBuf):
    return _axf.axfGetMetadataDocumentName(hAxFMetadataDocument, sBuf)


axfGetMetadataDocumentName = _axf.axfGetMetadataDocumentName


def axfGetNumberOfMetadataSubDocuments(hAxFMetadataDocument):
    return _axf.axfGetNumberOfMetadataSubDocuments(hAxFMetadataDocument)


axfGetNumberOfMetadataSubDocuments = _axf.axfGetNumberOfMetadataSubDocuments


def axfGetMetadataDataSubDocument(hAxFMetadataDocument, iMetadataSubdocument):
    return _axf.axfGetMetadataDataSubDocument(
        hAxFMetadataDocument, iMetadataSubdocument)


axfGetMetadataDataSubDocument = _axf.axfGetMetadataDataSubDocument


def axfGetNumberOfMetadataProperties(hAxFMetadataDocument):
    return _axf.axfGetNumberOfMetadataProperties(hAxFMetadataDocument)


axfGetNumberOfMetadataProperties = _axf.axfGetNumberOfMetadataProperties


def axfGetMetadataPropertyName(hAxFMetadataDocument, iProperty, sBuf):
    return _axf.axfGetMetadataPropertyName(
        hAxFMetadataDocument, iProperty, sBuf)


axfGetMetadataPropertyName = _axf.axfGetMetadataPropertyName


def axfGetMetadataPropertyType(hAxFMetadataDocument, iProperty):
    return _axf.axfGetMetadataPropertyType(hAxFMetadataDocument, iProperty)


axfGetMetadataPropertyType = _axf.axfGetMetadataPropertyType


def axfGetMetadataPropertyValueLen(hAxFMetadataDocument, iProperty):
    return _axf.axfGetMetadataPropertyValueLen(hAxFMetadataDocument, iProperty)


axfGetMetadataPropertyValueLen = _axf.axfGetMetadataPropertyValueLen


def axfGetMetadataPropertyValue(hAxFMetadataDocument, iProperty, iType, pBuf):
    return _axf.axfGetMetadataPropertyValue(
        hAxFMetadataDocument, iProperty, iType, pBuf)


axfGetMetadataPropertyValue = _axf.axfGetMetadataPropertyValue


def axfGetNumberOfRepresentations(*args):
    return _axf.axfGetNumberOfRepresentations(*args)


axfGetNumberOfRepresentations = _axf.axfGetNumberOfRepresentations


def axfGetRepresentation(*args):
    return _axf.axfGetRepresentation(*args)


axfGetRepresentation = _axf.axfGetRepresentation


def axfGetPreferredRepresentation(*args):
    return _axf.axfGetPreferredRepresentation(*args)


axfGetPreferredRepresentation = _axf.axfGetPreferredRepresentation


def axfGetRepresentationClass(hAxFRepresentation, sBuf):
    return _axf.axfGetRepresentationClass(hAxFRepresentation, sBuf)


axfGetRepresentationClass = _axf.axfGetRepresentationClass


def axfGetRepresentationTypeKey(hAxFRepresentation, sBuf):
    return _axf.axfGetRepresentationTypeKey(hAxFRepresentation, sBuf)


axfGetRepresentationTypeKey = _axf.axfGetRepresentationTypeKey


def axfGetRepresentationVariant(hAxFRepresentation, sVariantStringBuf):
    return _axf.axfGetRepresentationVariant(
        hAxFRepresentation, sVariantStringBuf)


axfGetRepresentationVariant = _axf.axfGetRepresentationVariant


def axfGetRepresentationVersion(hAxFRepresentation):
    return _axf.axfGetRepresentationVersion(hAxFRepresentation)


axfGetRepresentationVersion = _axf.axfGetRepresentationVersion


def axfGetHighestSupportedRepresentationVersion():
    return _axf.axfGetHighestSupportedRepresentationVersion()


axfGetHighestSupportedRepresentationVersion = _axf.axfGetHighestSupportedRepresentationVersion


def axfIsRepresentationSupported(hAxFRepresentation):
    return _axf.axfIsRepresentationSupported(hAxFRepresentation)


axfIsRepresentationSupported = _axf.axfIsRepresentationSupported


def axfCheckRepresentationCompatibilityProfile(
        hAxFRepresentation, sCompatibilityProfile, iVersion):
    return _axf.axfCheckRepresentationCompatibilityProfile(
        hAxFRepresentation, sCompatibilityProfile, iVersion)


axfCheckRepresentationCompatibilityProfile = _axf.axfCheckRepresentationCompatibilityProfile


def axfGetCarPaintFlakesBtfRepresentation(hAxFCarPaintRepresentation):
    return _axf.axfGetCarPaintFlakesBtfRepresentation(
        hAxFCarPaintRepresentation)


axfGetCarPaintFlakesBtfRepresentation = _axf.axfGetCarPaintFlakesBtfRepresentation


def axfGetCarPaintTabulatedBrdfRepresentation(hAxFCarPaintRepresentation):
    return _axf.axfGetCarPaintTabulatedBrdfRepresentation(
        hAxFCarPaintRepresentation)


axfGetCarPaintTabulatedBrdfRepresentation = _axf.axfGetCarPaintTabulatedBrdfRepresentation


def axfGetSvbrdfDiffuseModelRepresentation(hAxFSvbrdfRepresentation):
    return _axf.axfGetSvbrdfDiffuseModelRepresentation(
        hAxFSvbrdfRepresentation)


axfGetSvbrdfDiffuseModelRepresentation = _axf.axfGetSvbrdfDiffuseModelRepresentation


def axfGetSvbrdfSpecularModelRepresentation(hAxFSvbrdfRepresentation):
    return _axf.axfGetSvbrdfSpecularModelRepresentation(
        hAxFSvbrdfRepresentation)


axfGetSvbrdfSpecularModelRepresentation = _axf.axfGetSvbrdfSpecularModelRepresentation


def axfGetSvbrdfSpecularModelVariant(
        hAxFSpecularModelRepresentation,
        sVariantStringBuf):
    return _axf.axfGetSvbrdfSpecularModelVariant(
        hAxFSpecularModelRepresentation, sVariantStringBuf)


axfGetSvbrdfSpecularModelVariant = _axf.axfGetSvbrdfSpecularModelVariant


def axfGetSvbrdfSpecularFresnelVariant(
        hAxFSpecularModelRepresentation,
        sVariantStringBuf):
    return _axf.axfGetSvbrdfSpecularFresnelVariant(
        hAxFSpecularModelRepresentation, sVariantStringBuf)


axfGetSvbrdfSpecularFresnelVariant = _axf.axfGetSvbrdfSpecularFresnelVariant


def axfGetNumberOfRepresentationResources(hAxFRepresentation):
    return _axf.axfGetNumberOfRepresentationResources(hAxFRepresentation)


axfGetNumberOfRepresentationResources = _axf.axfGetNumberOfRepresentationResources


def axfGetRepresentationResourceFromIndex(hAxFRepresentation, iResource):
    return _axf.axfGetRepresentationResourceFromIndex(
        hAxFRepresentation, iResource)


axfGetRepresentationResourceFromIndex = _axf.axfGetRepresentationResourceFromIndex


def axfGetRepresentationResourceFromLookupPath(
        hAxFRepresentation, sLookupPath):
    return _axf.axfGetRepresentationResourceFromLookupPath(
        hAxFRepresentation, sLookupPath)


axfGetRepresentationResourceFromLookupPath = _axf.axfGetRepresentationResourceFromLookupPath


def axfGetRepresentationResourceFromLookupName(
        hAxFRepresentation, sLookupName, bSearchRecursive=True):
    return _axf.axfGetRepresentationResourceFromLookupName(
        hAxFRepresentation, sLookupName, bSearchRecursive)


axfGetRepresentationResourceFromLookupName = _axf.axfGetRepresentationResourceFromLookupName


def axfGetResourceLookupPath(hAxFRepresentation, hAxFResource, sBuf):
    return _axf.axfGetResourceLookupPath(
        hAxFRepresentation, hAxFResource, sBuf)


axfGetResourceLookupPath = _axf.axfGetResourceLookupPath


def axfGetResourceNodePath(hAxFResource, sBuf):
    return _axf.axfGetResourceNodePath(hAxFResource, sBuf)


axfGetResourceNodePath = _axf.axfGetResourceNodePath


def axfGetResourceDataNumDims(hAxFResource):
    return _axf.axfGetResourceDataNumDims(hAxFResource)


axfGetResourceDataNumDims = _axf.axfGetResourceDataNumDims


def axfGetResourceDataDimExtent(hAxFResource, iDim):
    return _axf.axfGetResourceDataDimExtent(hAxFResource, iDim)


axfGetResourceDataDimExtent = _axf.axfGetResourceDataDimExtent


def axfGetResourceDataNumElems(hAxFResource):
    return _axf.axfGetResourceDataNumElems(hAxFResource)


axfGetResourceDataNumElems = _axf.axfGetResourceDataNumElems


def axfGetResourceData(hAxFResource, pfBuffer):
    return _axf.axfGetResourceData(hAxFResource, pfBuffer)


axfGetResourceData = _axf.axfGetResourceData


def axfGetNumPreviewImages(hAxFRepresentation):
    return _axf.axfGetNumPreviewImages(hAxFRepresentation)


axfGetNumPreviewImages = _axf.axfGetNumPreviewImages


def axfGetPreviewImageName(hAxFRepresentation, iImageIdx, sBuf):
    return _axf.axfGetPreviewImageName(hAxFRepresentation, iImageIdx, sBuf)


axfGetPreviewImageName = _axf.axfGetPreviewImageName


def axfGetPreviewImageInfo(hAxFRepresentation, iImageIdx):
    return _axf.axfGetPreviewImageInfo(hAxFRepresentation, iImageIdx)


axfGetPreviewImageInfo = _axf.axfGetPreviewImageInfo


def axfGetPreviewImage(*args):
    return _axf.axfGetPreviewImage(*args)


axfGetPreviewImage = _axf.axfGetPreviewImage


def axfStorePreviewImage(*args):
    return _axf.axfStorePreviewImage(*args)


axfStorePreviewImage = _axf.axfStorePreviewImage


def axfGetSpectralizationTrafo(
        hAxFRepresentation,
        vSpectralSampling,
        iNumSpectralSamples,
        pMatrix,
        sSourceColorSpace):
    return _axf.axfGetSpectralizationTrafo(
        hAxFRepresentation,
        vSpectralSampling,
        iNumSpectralSamples,
        pMatrix,
        sSourceColorSpace)


axfGetSpectralizationTrafo = _axf.axfGetSpectralizationTrafo


class CPUDecoder(_object):
    __swig_setmethods__ = {}

    def __setattr__(
        self,
        name,
        value): return _swig_setattr(
        self,
        CPUDecoder,
        name,
        value)
    __swig_getmethods__ = {}
    def __getattr__(self, name): return _swig_getattr(self, CPUDecoder, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def eval(self, pfResult, pfAlpha, v3DirIn, v3DirOut, v2UV):
        return _axf.CPUDecoder_eval(
            self, pfResult, pfAlpha, v3DirIn, v3DirOut, v2UV)

    def computePreviewImage(self, *args):
        return _axf.CPUDecoder_computePreviewImage(self, *args)

    def getWidthPixel(self):
        return _axf.CPUDecoder_getWidthPixel(self)

    def getHeightPixel(self):
        return _axf.CPUDecoder_getHeightPixel(self)

    def getWidthMM(self):
        return _axf.CPUDecoder_getWidthMM(self)

    def getHeightMM(self):
        return _axf.CPUDecoder_getHeightMM(self)

    def hasTransparency(self):
        return _axf.CPUDecoder_hasTransparency(self)
    if _newclass:
        create = staticmethod(_axf.CPUDecoder_create)
    else:
        create = _axf.CPUDecoder_create

    def getTargetColorSpaceString(self):
        return _axf.CPUDecoder_getTargetColorSpaceString(self)

    def getTargetTextureOrigin(self):
        return _axf.CPUDecoder_getTargetTextureOrigin(self)
    if _newclass:
        destroy = staticmethod(_axf.CPUDecoder_destroy)
    else:
        destroy = _axf.CPUDecoder_destroy


CPUDecoder_swigregister = _axf.CPUDecoder_swigregister
CPUDecoder_swigregister(CPUDecoder)


def CPUDecoder_create(*args):
    return _axf.CPUDecoder_create(*args)


CPUDecoder_create = _axf.CPUDecoder_create


def CPUDecoder_destroy(*args):
    return _axf.CPUDecoder_destroy(*args)


CPUDecoder_destroy = _axf.CPUDecoder_destroy


class Sampler(_object):
    __swig_setmethods__ = {}

    def __setattr__(
        self,
        name,
        value): return _swig_setattr(
        self,
        Sampler,
        name,
        value)
    __swig_getmethods__ = {}
    def __getattr__(self, name): return _swig_getattr(self, Sampler, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def sample(self, v3Xi, v3Dir, v2UV, v3DirSampled):
        return _axf.Sampler_sample(self, v3Xi, v3Dir, v2UV, v3DirSampled)

    def pdf(self, v3DirIn, v3DirOut, v2UV):
        return _axf.Sampler_pdf(self, v3DirIn, v3DirOut, v2UV)
    if _newclass:
        create = staticmethod(_axf.Sampler_create)
    else:
        create = _axf.Sampler_create
    if _newclass:
        destroy = staticmethod(_axf.Sampler_destroy)
    else:
        destroy = _axf.Sampler_destroy


Sampler_swigregister = _axf.Sampler_swigregister
Sampler_swigregister(Sampler)


def Sampler_create(hAxFRepresentation, pclDecoder):
    return _axf.Sampler_create(hAxFRepresentation, pclDecoder)


Sampler_create = _axf.Sampler_create


def Sampler_destroy(*args):
    return _axf.Sampler_destroy(*args)


Sampler_destroy = _axf.Sampler_destroy

ID_DEFAULT = _axf.ID_DEFAULT
ID_VRED = _axf.ID_VRED


class TextureDecoder(_object):
    __swig_setmethods__ = {}

    def __setattr__(
        self,
        name,
        value): return _swig_setattr(
        self,
        TextureDecoder,
        name,
        value)
    __swig_getmethods__ = {}

    def __getattr__(
        self, name): return _swig_getattr(
        self, TextureDecoder, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getWidthPixel(self):
        return _axf.TextureDecoder_getWidthPixel(self)

    def getHeightPixel(self):
        return _axf.TextureDecoder_getHeightPixel(self)

    def getWidthMM(self):
        return _axf.TextureDecoder_getWidthMM(self)

    def getHeightMM(self):
        return _axf.TextureDecoder_getHeightMM(self)

    def getNumProperties(self):
        return _axf.TextureDecoder_getNumProperties(self)

    def getProperty(self, index, pBuf, iDataType, iSize):
        return _axf.TextureDecoder_getProperty(
            self, index, pBuf, iDataType, iSize)

    def getPropertyName(self, index, sBuf):
        return _axf.TextureDecoder_getPropertyName(self, index, sBuf)

    def getPropertyType(self, index):
        return _axf.TextureDecoder_getPropertyType(self, index)

    def getPropertySize(self, index):
        return _axf.TextureDecoder_getPropertySize(self, index)

    def getPropertyLen(self, index):
        return _axf.TextureDecoder_getPropertyLen(self, index)

    def getNumTextures(self):
        return _axf.TextureDecoder_getNumTextures(self)

    def getTextureNumMipLevels(self, index):
        return _axf.TextureDecoder_getTextureNumMipLevels(self, index)

    def getTextureName(self, index, sBuf):
        return _axf.TextureDecoder_getTextureName(self, index, sBuf)

    def getTextureParams(self, index):
        return _axf.TextureDecoder_getTextureParams(self, index)

    def getTextureSize(self, index, iMipLevel):
        return _axf.TextureDecoder_getTextureSize(self, index, iMipLevel)

    def getTextureSizeMM(self, index):
        return _axf.TextureDecoder_getTextureSizeMM(self, index)

    def getTextureData(self, index, iMipLevel, iTargetTextureType, pData):
        return _axf.TextureDecoder_getTextureData(
            self, index, iMipLevel, iTargetTextureType, pData)
    if _newclass:
        create = staticmethod(_axf.TextureDecoder_create)
    else:
        create = _axf.TextureDecoder_create
    if _newclass:
        destroy = staticmethod(_axf.TextureDecoder_destroy)
    else:
        destroy = _axf.TextureDecoder_destroy

    def getTargetColorSpaceString(self):
        return _axf.TextureDecoder_getTargetColorSpaceString(self)

    def getTargetTextureOrigin(self):
        return _axf.TextureDecoder_getTargetTextureOrigin(self)

    def getTargetSystemID(self):
        return _axf.TextureDecoder_getTargetSystemID(self)


TextureDecoder_swigregister = _axf.TextureDecoder_swigregister
TextureDecoder_swigregister(TextureDecoder)


def TextureDecoder_create(*args):
    return _axf.TextureDecoder_create(*args)


TextureDecoder_create = _axf.TextureDecoder_create


def TextureDecoder_destroy(*args):
    return _axf.TextureDecoder_destroy(*args)


TextureDecoder_destroy = _axf.TextureDecoder_destroy

# This file is compatible with both classic and new-style classes.